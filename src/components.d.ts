/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ChatCategoryInterface, ChatClickToLinkEmit, ChatContactInterface, ChatCreateFolderOutputInterface, ChatDialogInterface, ChatLogo, ChatMessage, ChatUserActionStatusState, ChatUserPresenceState, ChatViewToShowEnum, ChatWritingUserInterface, ShowFullChatOutputInterface, } from "./index";
export namespace Components {
    interface BtnWrapper {
        "dialogs": number;
        "showChat": boolean;
    }
    interface CntModuleChat {
        /**
          * позволяет активировать/деактивароть возможность записи аудио
         */
        "activeRecordAudioState": (state: boolean) => Promise<void>;
        /**
          * позволяет активировать/деактивароть возможность октрытие приложение
         */
        "activeShowFullChat": (state: boolean) => Promise<void>;
        /**
          * Возможность записи аудио
         */
        "canRecordAudio": boolean;
        /**
          * array categories
         */
        "categories": ChatCategoryInterface[];
        /**
          * сменить окно показа
         */
        "changeViewToShow": (state: ChatViewToShowEnum) => Promise<void>;
        /**
          * действие сообеседников в чате (печатает, записывает аудио и т.д.)
         */
        "chatActionState": ChatUserActionStatusState;
        /**
          * присутствие пользователя в сети
         */
        "chatPresenceState": ChatUserPresenceState;
        /**
          * select content default
         */
        "chatViewState": ChatViewToShowEnum;
        /**
          * показывает только кнопку
         */
        "close": () => Promise<void>;
        /**
          * масиив данных контактов
         */
        "contacts": ChatContactInterface[];
        /**
          * массив данных для диалогов
         */
        "dialogs": ChatDialogInterface[];
        /**
          * словарь
         */
        "dictionary": any;
        /**
          * отключение поиска контактов
         */
        "disableInnerSearchContactState": boolean;
        /**
          * отключение поиска диалогов
         */
        "disableInnerSearchDialogsState": boolean;
        /**
          * отключение поиска сообщений
         */
        "disableInnerSearchMessagesState": boolean;
        /**
          * отключение возможности октрытие приложение чата
         */
        "disableShowFullChatState": boolean;
        /**
          * скрывает весь блок что бы на экране не было вообще видно
         */
        "hide": () => Promise<void>;
        /**
          * массив данных личных сообщений
         */
        "message": ChatMessage[];
        /**
          * открывает блок чатов
         */
        "open": () => Promise<void>;
        "openDialog": (dialog: ChatDialogInterface) => Promise<void>;
        /**
          * Перменная для включения/отключения показа чата в развернутом виде
         */
        "openState": boolean;
        /**
          * скролит вниз окно сообщений
         */
        "safeScrollToBotMessageView": () => Promise<void>;
        /**
          * позволяет установить печатающие данные
         */
        "setWritingState": (item?: ChatWritingUserInterface) => Promise<void>;
        /**
          * показывает весь блок после скрытия
         */
        "show": () => Promise<void>;
        /**
          * меняет статусы действия текущих (печатает, записывает и т.д.)
         */
        "updateChatActionState": (item: ChatUserActionStatusState) => Promise<void>;
        /**
          * меняет статус (присутстия собеседников или контакта) в чате
         */
        "updateChatPresenceState": (item: ChatUserPresenceState) => Promise<void>;
        /**
          * видимость
         */
        "visibleState": boolean;
        /**
          * добавляем печатающий
         */
        "writing": ChatWritingUserInterface[];
    }
    interface ContactCard {
        /**
          * Принимаем контакт
         */
        "contact": ChatContactInterface;
        /**
          * Данные выбора темы для Мобильная/Модульной версии
         */
        "theme": "mobile" | "module" | "comp";
    }
    interface ContactsList {
        "contacts": ChatContactInterface[];
        /**
          * отключение поиска контактов
         */
        "disableInnerSearchContactState": boolean;
        /**
          * Тема для модульного/мобильного чата
         */
        "theme": "mobile" | "module";
    }
    interface ContactsListBody {
        /**
          * массив данных контактов
         */
        "contacts": ChatContactInterface[];
        /**
          * Данные выбора темы для Мобильная/Модульной/Комп версии
         */
        "theme": "mobile" | "module" | "comp";
    }
    interface ContactsListHeader {
        /**
          * Данные выбора темы для Мобильная/Модульной версии
         */
        "theme": "mobile" | "module" | "comp";
    }
    interface DialogCard {
        /**
          * карточка диалога
         */
        "mess": ChatDialogInterface;
        /**
          * карточка диалога
         */
        "theme": "comp" | "mobile";
    }
    interface DialogCategories {
        "categories": ChatCategoryInterface[];
        "theme": "comp" | "module" | "mobile";
    }
    interface FooterAudio {
        /**
          * Пропс с классом CSS
         */
        "theme": "comp" | "mobile" | "module";
    }
    interface FooterText {
        /**
          * Возможность записи аудио
         */
        "canRecordAudio": boolean;
        /**
          * Пропс с классом
         */
        "theme": "comp" | "mobile" | "module";
    }
    interface MChatDialogs {
        /**
          * массив диалогов
         */
        "dialogs": ChatDialogInterface[];
    }
    interface MChatFooter {
        /**
          * Данные выбора темы для Мобильная/Модульной версии
         */
        "theme": "mobile" | "module";
    }
    interface MChatHeader {
        /**
          * массив категорий диалогов
         */
        "categories": ChatCategoryInterface[];
    }
    interface MessageFrom {
        /**
          * Принимаем сообщения для пользователя
         */
        "message"?: ChatMessage;
    }
    interface MessageImg {
        /**
          * Проверка статуса доставки сообщения
         */
        "checkSendMess": any;
        /**
          * Принимаем сообщения для пользователя
         */
        "message": any;
    }
    interface MessageText {
        /**
          * Проверка статуса доставки сообщения
         */
        "checkSendMess": any;
        /**
          * Получаем время оттправки сообщения
         */
        "createSendTime": any;
        /**
          * Принимаем сообщения для пользователя
         */
        "message": ChatMessage;
    }
    interface MobileChat {
    }
    interface MobileDialogs {
        /**
          * массив категорий диалогов
         */
        "categories": ChatCategoryInterface[];
        /**
          * массив сообщений
         */
        "dialogs": ChatDialogInterface[];
    }
    interface MobilePersonal {
        /**
          * array data personal messages
         */
        "message": ChatMessage[];
    }
    interface ModuleChat {
    }
    interface ModuleHeader {
        /**
          * отключение возможности октрытие приложение чата
         */
        "disableShowFullChatState": boolean;
    }
    interface ModulePersonal {
        /**
          * Возможность записи аудио
         */
        "canRecordAudio": boolean;
        "chatActionState": ChatUserActionStatusState;
        "chatPresenceState": ChatUserPresenceState;
        /**
          * array data dialogs
         */
        "dialogs": ChatDialogInterface[];
        /**
          * array data personal messages
         */
        "message": ChatMessage[];
        "openedDialog": ChatDialogInterface;
        "writing": ChatWritingUserInterface[];
    }
    interface MyComponent {
    }
    interface PersonalFooter {
        /**
          * Возможность записи аудио
         */
        "canRecordAudio": boolean;
        "theme": "comp" | "mobile" | "module";
    }
    interface PersonalHeader {
        "chatActionState": ChatUserActionStatusState;
        "chatPresenceState": ChatUserPresenceState;
        /**
          * array data dialogs
         */
        "dialogs": ChatDialogInterface[];
        /**
          * array data personal messages
         */
        "message": ChatMessage[];
        "openedDialog": ChatDialogInterface;
    }
    interface PersonalMessage {
        /**
          * array data personal messages
         */
        "message": ChatMessage[];
        "theme": "mobile" | "module" | "comp";
        "writing": ChatWritingUserInterface[];
    }
    interface SAdamChat {
        /**
          * отключение поиска контактов
         */
        "disableInnerSearchContactState": boolean;
    }
    interface SAdamContacts {
        "contacts": ChatContactInterface[];
        /**
          * отключение поиска контактов
         */
        "disableInnerSearchContactState": boolean;
        /**
          * Тема для модульного/мобильного чата
         */
        "theme": "mobile" | "module" | "comp";
    }
    interface SAdamCopying {
    }
    interface SAdamDialogs {
        /**
          * массив категорий диалогов
         */
        "categories": ChatCategoryInterface[];
        /**
          * Массив с элементами диалога
         */
        "dialogs": ChatDialogInterface[];
    }
    interface SAdamDirect {
        "chatActionState": ChatUserActionStatusState;
        "chatPresenceState": ChatUserPresenceState;
        /**
          * Личный диалог
         */
        "message": ChatMessage[];
    }
    interface SAdamNavItem {
    }
    interface SAdamNavigate {
        /**
          * Логотип
         */
        "logo": ChatLogo;
    }
    interface SAdamNoChat {
    }
    interface SAdamPersonalHeader {
        "chatActionState": ChatUserActionStatusState;
        "chatPresenceState": ChatUserPresenceState;
        /**
          * Личный диалог
         */
        "message": ChatMessage[];
    }
    interface SAdamProfile {
        /**
          * Массив категорий
         */
        "categories": ChatCategoryInterface[];
        /**
          * Задаем стиль для мобильной/пк версии
         */
        "theme": "comp" | "mobile" | "module";
    }
    interface SAdamSearchContact {
    }
    interface SSaqhanChatAddQuestion {
    }
    interface SSaqhanChatFiles {
    }
    interface SSaqhanChatFilesWrapper {
    }
    interface SSaqhanChatFormSearch {
        /**
          * array categories
         */
        "categories": ChatCategoryInterface[];
    }
    interface SSaqhanChatFormSearchFiles {
    }
    interface SSaqhanChatUser {
        /**
          * массив с диалогами
         */
        "dialogs": ChatDialogInterface[];
    }
    interface SSaqhanChatUsers {
        /**
          * Массив данных с диалогами
         */
        "dialogs": ChatDialogInterface[];
    }
    interface SSaqhanChatUsersWrapper {
        "categories": ChatCategoryInterface[];
        /**
          * Массив данных с диалогами
         */
        "dialogs": ChatDialogInterface[];
        /**
          * Массив данных с личным чатом
         */
        "personalMessage": ChatMessage[];
    }
    interface UserFolders {
        /**
          * Массив dialogs
         */
        "dialogs": ChatDialogInterface[];
        /**
          * Задаем стиль для мобильной/пк версии
         */
        "theme": "comp" | "mobile" | "module";
    }
    interface UserProfile {
    }
    interface UserStatus {
        "chatActionState": ChatUserActionStatusState;
        "chatPresenceState": ChatUserPresenceState;
        /**
          * Тема для блока
         */
        "theme": "comp" | "mobile" | "module";
    }
}
declare global {
    interface HTMLBtnWrapperElement extends Components.BtnWrapper, HTMLStencilElement {
    }
    var HTMLBtnWrapperElement: {
        prototype: HTMLBtnWrapperElement;
        new (): HTMLBtnWrapperElement;
    };
    interface HTMLCntModuleChatElement extends Components.CntModuleChat, HTMLStencilElement {
    }
    var HTMLCntModuleChatElement: {
        prototype: HTMLCntModuleChatElement;
        new (): HTMLCntModuleChatElement;
    };
    interface HTMLContactCardElement extends Components.ContactCard, HTMLStencilElement {
    }
    var HTMLContactCardElement: {
        prototype: HTMLContactCardElement;
        new (): HTMLContactCardElement;
    };
    interface HTMLContactsListElement extends Components.ContactsList, HTMLStencilElement {
    }
    var HTMLContactsListElement: {
        prototype: HTMLContactsListElement;
        new (): HTMLContactsListElement;
    };
    interface HTMLContactsListBodyElement extends Components.ContactsListBody, HTMLStencilElement {
    }
    var HTMLContactsListBodyElement: {
        prototype: HTMLContactsListBodyElement;
        new (): HTMLContactsListBodyElement;
    };
    interface HTMLContactsListHeaderElement extends Components.ContactsListHeader, HTMLStencilElement {
    }
    var HTMLContactsListHeaderElement: {
        prototype: HTMLContactsListHeaderElement;
        new (): HTMLContactsListHeaderElement;
    };
    interface HTMLDialogCardElement extends Components.DialogCard, HTMLStencilElement {
    }
    var HTMLDialogCardElement: {
        prototype: HTMLDialogCardElement;
        new (): HTMLDialogCardElement;
    };
    interface HTMLDialogCategoriesElement extends Components.DialogCategories, HTMLStencilElement {
    }
    var HTMLDialogCategoriesElement: {
        prototype: HTMLDialogCategoriesElement;
        new (): HTMLDialogCategoriesElement;
    };
    interface HTMLFooterAudioElement extends Components.FooterAudio, HTMLStencilElement {
    }
    var HTMLFooterAudioElement: {
        prototype: HTMLFooterAudioElement;
        new (): HTMLFooterAudioElement;
    };
    interface HTMLFooterTextElement extends Components.FooterText, HTMLStencilElement {
    }
    var HTMLFooterTextElement: {
        prototype: HTMLFooterTextElement;
        new (): HTMLFooterTextElement;
    };
    interface HTMLMChatDialogsElement extends Components.MChatDialogs, HTMLStencilElement {
    }
    var HTMLMChatDialogsElement: {
        prototype: HTMLMChatDialogsElement;
        new (): HTMLMChatDialogsElement;
    };
    interface HTMLMChatFooterElement extends Components.MChatFooter, HTMLStencilElement {
    }
    var HTMLMChatFooterElement: {
        prototype: HTMLMChatFooterElement;
        new (): HTMLMChatFooterElement;
    };
    interface HTMLMChatHeaderElement extends Components.MChatHeader, HTMLStencilElement {
    }
    var HTMLMChatHeaderElement: {
        prototype: HTMLMChatHeaderElement;
        new (): HTMLMChatHeaderElement;
    };
    interface HTMLMessageFromElement extends Components.MessageFrom, HTMLStencilElement {
    }
    var HTMLMessageFromElement: {
        prototype: HTMLMessageFromElement;
        new (): HTMLMessageFromElement;
    };
    interface HTMLMessageImgElement extends Components.MessageImg, HTMLStencilElement {
    }
    var HTMLMessageImgElement: {
        prototype: HTMLMessageImgElement;
        new (): HTMLMessageImgElement;
    };
    interface HTMLMessageTextElement extends Components.MessageText, HTMLStencilElement {
    }
    var HTMLMessageTextElement: {
        prototype: HTMLMessageTextElement;
        new (): HTMLMessageTextElement;
    };
    interface HTMLMobileChatElement extends Components.MobileChat, HTMLStencilElement {
    }
    var HTMLMobileChatElement: {
        prototype: HTMLMobileChatElement;
        new (): HTMLMobileChatElement;
    };
    interface HTMLMobileDialogsElement extends Components.MobileDialogs, HTMLStencilElement {
    }
    var HTMLMobileDialogsElement: {
        prototype: HTMLMobileDialogsElement;
        new (): HTMLMobileDialogsElement;
    };
    interface HTMLMobilePersonalElement extends Components.MobilePersonal, HTMLStencilElement {
    }
    var HTMLMobilePersonalElement: {
        prototype: HTMLMobilePersonalElement;
        new (): HTMLMobilePersonalElement;
    };
    interface HTMLModuleChatElement extends Components.ModuleChat, HTMLStencilElement {
    }
    var HTMLModuleChatElement: {
        prototype: HTMLModuleChatElement;
        new (): HTMLModuleChatElement;
    };
    interface HTMLModuleHeaderElement extends Components.ModuleHeader, HTMLStencilElement {
    }
    var HTMLModuleHeaderElement: {
        prototype: HTMLModuleHeaderElement;
        new (): HTMLModuleHeaderElement;
    };
    interface HTMLModulePersonalElement extends Components.ModulePersonal, HTMLStencilElement {
    }
    var HTMLModulePersonalElement: {
        prototype: HTMLModulePersonalElement;
        new (): HTMLModulePersonalElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLPersonalFooterElement extends Components.PersonalFooter, HTMLStencilElement {
    }
    var HTMLPersonalFooterElement: {
        prototype: HTMLPersonalFooterElement;
        new (): HTMLPersonalFooterElement;
    };
    interface HTMLPersonalHeaderElement extends Components.PersonalHeader, HTMLStencilElement {
    }
    var HTMLPersonalHeaderElement: {
        prototype: HTMLPersonalHeaderElement;
        new (): HTMLPersonalHeaderElement;
    };
    interface HTMLPersonalMessageElement extends Components.PersonalMessage, HTMLStencilElement {
    }
    var HTMLPersonalMessageElement: {
        prototype: HTMLPersonalMessageElement;
        new (): HTMLPersonalMessageElement;
    };
    interface HTMLSAdamChatElement extends Components.SAdamChat, HTMLStencilElement {
    }
    var HTMLSAdamChatElement: {
        prototype: HTMLSAdamChatElement;
        new (): HTMLSAdamChatElement;
    };
    interface HTMLSAdamContactsElement extends Components.SAdamContacts, HTMLStencilElement {
    }
    var HTMLSAdamContactsElement: {
        prototype: HTMLSAdamContactsElement;
        new (): HTMLSAdamContactsElement;
    };
    interface HTMLSAdamCopyingElement extends Components.SAdamCopying, HTMLStencilElement {
    }
    var HTMLSAdamCopyingElement: {
        prototype: HTMLSAdamCopyingElement;
        new (): HTMLSAdamCopyingElement;
    };
    interface HTMLSAdamDialogsElement extends Components.SAdamDialogs, HTMLStencilElement {
    }
    var HTMLSAdamDialogsElement: {
        prototype: HTMLSAdamDialogsElement;
        new (): HTMLSAdamDialogsElement;
    };
    interface HTMLSAdamDirectElement extends Components.SAdamDirect, HTMLStencilElement {
    }
    var HTMLSAdamDirectElement: {
        prototype: HTMLSAdamDirectElement;
        new (): HTMLSAdamDirectElement;
    };
    interface HTMLSAdamNavItemElement extends Components.SAdamNavItem, HTMLStencilElement {
    }
    var HTMLSAdamNavItemElement: {
        prototype: HTMLSAdamNavItemElement;
        new (): HTMLSAdamNavItemElement;
    };
    interface HTMLSAdamNavigateElement extends Components.SAdamNavigate, HTMLStencilElement {
    }
    var HTMLSAdamNavigateElement: {
        prototype: HTMLSAdamNavigateElement;
        new (): HTMLSAdamNavigateElement;
    };
    interface HTMLSAdamNoChatElement extends Components.SAdamNoChat, HTMLStencilElement {
    }
    var HTMLSAdamNoChatElement: {
        prototype: HTMLSAdamNoChatElement;
        new (): HTMLSAdamNoChatElement;
    };
    interface HTMLSAdamPersonalHeaderElement extends Components.SAdamPersonalHeader, HTMLStencilElement {
    }
    var HTMLSAdamPersonalHeaderElement: {
        prototype: HTMLSAdamPersonalHeaderElement;
        new (): HTMLSAdamPersonalHeaderElement;
    };
    interface HTMLSAdamProfileElement extends Components.SAdamProfile, HTMLStencilElement {
    }
    var HTMLSAdamProfileElement: {
        prototype: HTMLSAdamProfileElement;
        new (): HTMLSAdamProfileElement;
    };
    interface HTMLSAdamSearchContactElement extends Components.SAdamSearchContact, HTMLStencilElement {
    }
    var HTMLSAdamSearchContactElement: {
        prototype: HTMLSAdamSearchContactElement;
        new (): HTMLSAdamSearchContactElement;
    };
    interface HTMLSSaqhanChatAddQuestionElement extends Components.SSaqhanChatAddQuestion, HTMLStencilElement {
    }
    var HTMLSSaqhanChatAddQuestionElement: {
        prototype: HTMLSSaqhanChatAddQuestionElement;
        new (): HTMLSSaqhanChatAddQuestionElement;
    };
    interface HTMLSSaqhanChatFilesElement extends Components.SSaqhanChatFiles, HTMLStencilElement {
    }
    var HTMLSSaqhanChatFilesElement: {
        prototype: HTMLSSaqhanChatFilesElement;
        new (): HTMLSSaqhanChatFilesElement;
    };
    interface HTMLSSaqhanChatFilesWrapperElement extends Components.SSaqhanChatFilesWrapper, HTMLStencilElement {
    }
    var HTMLSSaqhanChatFilesWrapperElement: {
        prototype: HTMLSSaqhanChatFilesWrapperElement;
        new (): HTMLSSaqhanChatFilesWrapperElement;
    };
    interface HTMLSSaqhanChatFormSearchElement extends Components.SSaqhanChatFormSearch, HTMLStencilElement {
    }
    var HTMLSSaqhanChatFormSearchElement: {
        prototype: HTMLSSaqhanChatFormSearchElement;
        new (): HTMLSSaqhanChatFormSearchElement;
    };
    interface HTMLSSaqhanChatFormSearchFilesElement extends Components.SSaqhanChatFormSearchFiles, HTMLStencilElement {
    }
    var HTMLSSaqhanChatFormSearchFilesElement: {
        prototype: HTMLSSaqhanChatFormSearchFilesElement;
        new (): HTMLSSaqhanChatFormSearchFilesElement;
    };
    interface HTMLSSaqhanChatUserElement extends Components.SSaqhanChatUser, HTMLStencilElement {
    }
    var HTMLSSaqhanChatUserElement: {
        prototype: HTMLSSaqhanChatUserElement;
        new (): HTMLSSaqhanChatUserElement;
    };
    interface HTMLSSaqhanChatUsersElement extends Components.SSaqhanChatUsers, HTMLStencilElement {
    }
    var HTMLSSaqhanChatUsersElement: {
        prototype: HTMLSSaqhanChatUsersElement;
        new (): HTMLSSaqhanChatUsersElement;
    };
    interface HTMLSSaqhanChatUsersWrapperElement extends Components.SSaqhanChatUsersWrapper, HTMLStencilElement {
    }
    var HTMLSSaqhanChatUsersWrapperElement: {
        prototype: HTMLSSaqhanChatUsersWrapperElement;
        new (): HTMLSSaqhanChatUsersWrapperElement;
    };
    interface HTMLUserFoldersElement extends Components.UserFolders, HTMLStencilElement {
    }
    var HTMLUserFoldersElement: {
        prototype: HTMLUserFoldersElement;
        new (): HTMLUserFoldersElement;
    };
    interface HTMLUserProfileElement extends Components.UserProfile, HTMLStencilElement {
    }
    var HTMLUserProfileElement: {
        prototype: HTMLUserProfileElement;
        new (): HTMLUserProfileElement;
    };
    interface HTMLUserStatusElement extends Components.UserStatus, HTMLStencilElement {
    }
    var HTMLUserStatusElement: {
        prototype: HTMLUserStatusElement;
        new (): HTMLUserStatusElement;
    };
    interface HTMLElementTagNameMap {
        "btn-wrapper": HTMLBtnWrapperElement;
        "cnt-module-chat": HTMLCntModuleChatElement;
        "contact-card": HTMLContactCardElement;
        "contacts-list": HTMLContactsListElement;
        "contacts-list-body": HTMLContactsListBodyElement;
        "contacts-list-header": HTMLContactsListHeaderElement;
        "dialog-card": HTMLDialogCardElement;
        "dialog-categories": HTMLDialogCategoriesElement;
        "footer-audio": HTMLFooterAudioElement;
        "footer-text": HTMLFooterTextElement;
        "m-chat-dialogs": HTMLMChatDialogsElement;
        "m-chat-footer": HTMLMChatFooterElement;
        "m-chat-header": HTMLMChatHeaderElement;
        "message-from": HTMLMessageFromElement;
        "message-img": HTMLMessageImgElement;
        "message-text": HTMLMessageTextElement;
        "mobile-chat": HTMLMobileChatElement;
        "mobile-dialogs": HTMLMobileDialogsElement;
        "mobile-personal": HTMLMobilePersonalElement;
        "module-chat": HTMLModuleChatElement;
        "module-header": HTMLModuleHeaderElement;
        "module-personal": HTMLModulePersonalElement;
        "my-component": HTMLMyComponentElement;
        "personal-footer": HTMLPersonalFooterElement;
        "personal-header": HTMLPersonalHeaderElement;
        "personal-message": HTMLPersonalMessageElement;
        "s-adam-chat": HTMLSAdamChatElement;
        "s-adam-contacts": HTMLSAdamContactsElement;
        "s-adam-copying": HTMLSAdamCopyingElement;
        "s-adam-dialogs": HTMLSAdamDialogsElement;
        "s-adam-direct": HTMLSAdamDirectElement;
        "s-adam-nav-item": HTMLSAdamNavItemElement;
        "s-adam-navigate": HTMLSAdamNavigateElement;
        "s-adam-no-chat": HTMLSAdamNoChatElement;
        "s-adam-personal-header": HTMLSAdamPersonalHeaderElement;
        "s-adam-profile": HTMLSAdamProfileElement;
        "s-adam-search-contact": HTMLSAdamSearchContactElement;
        "s-saqhan-chat-add-question": HTMLSSaqhanChatAddQuestionElement;
        "s-saqhan-chat-files": HTMLSSaqhanChatFilesElement;
        "s-saqhan-chat-files-wrapper": HTMLSSaqhanChatFilesWrapperElement;
        "s-saqhan-chat-form-search": HTMLSSaqhanChatFormSearchElement;
        "s-saqhan-chat-form-search-files": HTMLSSaqhanChatFormSearchFilesElement;
        "s-saqhan-chat-user": HTMLSSaqhanChatUserElement;
        "s-saqhan-chat-users": HTMLSSaqhanChatUsersElement;
        "s-saqhan-chat-users-wrapper": HTMLSSaqhanChatUsersWrapperElement;
        "user-folders": HTMLUserFoldersElement;
        "user-profile": HTMLUserProfileElement;
        "user-status": HTMLUserStatusElement;
    }
}
declare namespace LocalJSX {
    interface BtnWrapper {
        "dialogs"?: number;
        /**
          * clock on clickToLink
         */
        "onClickToShowChat"?: (event: CustomEvent<void>) => void;
        "showChat"?: boolean;
    }
    interface CntModuleChat {
        /**
          * Возможность записи аудио
         */
        "canRecordAudio"?: boolean;
        /**
          * array categories
         */
        "categories"?: ChatCategoryInterface[];
        /**
          * действие сообеседников в чате (печатает, записывает аудио и т.д.)
         */
        "chatActionState"?: ChatUserActionStatusState;
        /**
          * присутствие пользователя в сети
         */
        "chatPresenceState"?: ChatUserPresenceState;
        /**
          * select content default
         */
        "chatViewState"?: ChatViewToShowEnum;
        /**
          * масиив данных контактов
         */
        "contacts"?: ChatContactInterface[];
        /**
          * массив данных для диалогов
         */
        "dialogs"?: ChatDialogInterface[];
        /**
          * словарь
         */
        "dictionary"?: any;
        /**
          * отключение поиска контактов
         */
        "disableInnerSearchContactState"?: boolean;
        /**
          * отключение поиска диалогов
         */
        "disableInnerSearchDialogsState"?: boolean;
        /**
          * отключение поиска сообщений
         */
        "disableInnerSearchMessagesState"?: boolean;
        /**
          * отключение возможности октрытие приложение чата
         */
        "disableShowFullChatState"?: boolean;
        /**
          * массив данных личных сообщений
         */
        "message"?: ChatMessage[];
        "onChatViewStateChange"?: (event: CustomEvent<ChatViewToShowEnum>) => void;
        /**
          * click to dialog
         */
        "onClickToDialog"?: (event: CustomEvent<ChatDialogInterface>) => void;
        /**
          * click to files button
         */
        "onClickToFilesBtn"?: (event: CustomEvent<void>) => void;
        /**
          * создание папки
         */
        "onCreateFolder"?: (event: CustomEvent<ChatCreateFolderOutputInterface>) => void;
        /**
          * search contact
         */
        "onSearchContact"?: (event: CustomEvent<string>) => void;
        "onSendTextMessage"?: (event: CustomEvent<string>) => void;
        /**
          * Разворачивать полную версию чата при клике иконку
         */
        "onShowFullChat"?: (event: CustomEvent<ShowFullChatOutputInterface>) => void;
        /**
          * Перменная для включения/отключения показа чата в развернутом виде
         */
        "openState"?: boolean;
        /**
          * видимость
         */
        "visibleState"?: boolean;
        /**
          * добавляем печатающий
         */
        "writing"?: ChatWritingUserInterface[];
    }
    interface ContactCard {
        /**
          * Принимаем контакт
         */
        "contact"?: ChatContactInterface;
        /**
          * clock on navigate
         */
        "onClickToContact"?: (event: CustomEvent<ChatContactInterface>) => void;
        /**
          * Данные выбора темы для Мобильная/Модульной версии
         */
        "theme"?: "mobile" | "module" | "comp";
    }
    interface ContactsList {
        "contacts"?: ChatContactInterface[];
        /**
          * отключение поиска контактов
         */
        "disableInnerSearchContactState"?: boolean;
        /**
          * click to click To Dialog
         */
        "onClickToContact"?: (event: CustomEvent<ChatContactInterface>) => void;
        /**
          * clock on clickToLink
         */
        "onClickToLink"?: (event: CustomEvent<string>) => void;
        /**
          * click to click To Show Contacts
         */
        "onClickToShowContacts"?: (event: CustomEvent<void>) => void;
        /**
          * click to click To Show Dialogs
         */
        "onClickToShowDialogs"?: (event: CustomEvent<void>) => void;
        /**
          * click to click To Show MenuBar
         */
        "onClickToShowMenuBar"?: (event: CustomEvent<void>) => void;
        /**
          * search contact
         */
        "onSearchContact"?: (event: CustomEvent<ChatContactInterface>) => void;
        /**
          * Тема для модульного/мобильного чата
         */
        "theme"?: "mobile" | "module";
    }
    interface ContactsListBody {
        /**
          * массив данных контактов
         */
        "contacts"?: ChatContactInterface[];
        /**
          * Данные выбора темы для Мобильная/Модульной/Комп версии
         */
        "theme"?: "mobile" | "module" | "comp";
    }
    interface ContactsListHeader {
        /**
          * clock on clickToLink
         */
        "onClickToShowDialogs"?: (event: CustomEvent<any>) => void;
        /**
          * search contact
         */
        "onSearchContact"?: (event: CustomEvent<string>) => void;
        /**
          * Данные выбора темы для Мобильная/Модульной версии
         */
        "theme"?: "mobile" | "module" | "comp";
    }
    interface DialogCard {
        /**
          * карточка диалога
         */
        "mess"?: ChatDialogInterface;
        /**
          * clock on dialog
         */
        "onClickToDialog"?: (event: CustomEvent<ChatDialogInterface>) => void;
        /**
          * карточка диалога
         */
        "theme"?: "comp" | "mobile";
    }
    interface DialogCategories {
        "categories"?: ChatCategoryInterface[];
        /**
          * clock on Category
         */
        "onClickToCategory"?: (event: CustomEvent<ChatCategoryInterface>) => void;
        "theme"?: "comp" | "module" | "mobile";
    }
    interface FooterAudio {
        /**
          * Эвент окончания записи аудио
         */
        "onRecordFinished"?: (event: CustomEvent<boolean>) => void;
        /**
          * Пропс с классом CSS
         */
        "theme"?: "comp" | "mobile" | "module";
    }
    interface FooterText {
        /**
          * Возможность записи аудио
         */
        "canRecordAudio"?: boolean;
        "onSendTextMessage"?: (event: CustomEvent<string>) => void;
        /**
          * Пока футера аудио
         */
        "onShowRecordAudioFooter"?: (event: CustomEvent<void>) => void;
        "onShowSendFileFooter"?: (event: CustomEvent<void>) => void;
        /**
          * Пропс с классом
         */
        "theme"?: "comp" | "mobile" | "module";
    }
    interface MChatDialogs {
        /**
          * массив диалогов
         */
        "dialogs"?: ChatDialogInterface[];
    }
    interface MChatFooter {
        /**
          * click to click To Show Contacts
         */
        "onClickToShowContacts"?: (event: CustomEvent<void>) => void;
        /**
          * click to click To Show Dialogs
         */
        "onClickToShowDialogs"?: (event: CustomEvent<void>) => void;
        /**
          * click to click To Show Contacts
         */
        "onClickToShowMenuBar"?: (event: CustomEvent<void>) => void;
        /**
          * Данные выбора темы для Мобильная/Модульной версии
         */
        "theme"?: "mobile" | "module";
    }
    interface MChatHeader {
        /**
          * массив категорий диалогов
         */
        "categories"?: ChatCategoryInterface[];
        /**
          * cancel search
         */
        "onCancelSearchPersonal"?: (event: CustomEvent<void>) => void;
        /**
          * click to add dialog
         */
        "onClickToAddDialog"?: (event: CustomEvent<void>) => void;
        /**
          * clock on searchDialogs
         */
        "onSearchDialogs"?: (event: CustomEvent<ChatDialogInterface>) => void;
    }
    interface MessageFrom {
        /**
          * Принимаем сообщения для пользователя
         */
        "message"?: ChatMessage;
    }
    interface MessageImg {
        /**
          * Проверка статуса доставки сообщения
         */
        "checkSendMess"?: any;
        /**
          * Принимаем сообщения для пользователя
         */
        "message"?: any;
    }
    interface MessageText {
        /**
          * Проверка статуса доставки сообщения
         */
        "checkSendMess"?: any;
        /**
          * Получаем время оттправки сообщения
         */
        "createSendTime"?: any;
        /**
          * Принимаем сообщения для пользователя
         */
        "message"?: ChatMessage;
    }
    interface MobileChat {
    }
    interface MobileDialogs {
        /**
          * массив категорий диалогов
         */
        "categories"?: ChatCategoryInterface[];
        /**
          * массив сообщений
         */
        "dialogs"?: ChatDialogInterface[];
        /**
          * cancel
         */
        "onCancelSearchPersonal"?: (event: CustomEvent<void>) => void;
        /**
          * click to add dialog
         */
        "onClickToAddDialog"?: (event: CustomEvent<string>) => void;
        /**
          * clock on Category
         */
        "onClickToCategory"?: (event: CustomEvent<ChatCategoryInterface>) => void;
        /**
          * click to dialog
         */
        "onClickToDialog"?: (event: CustomEvent<string>) => void;
        /**
          * click to click To Show Contacts
         */
        "onClickToShowContacts"?: (event: CustomEvent<void>) => void;
        /**
          * click to click To Show Dialogs
         */
        "onClickToShowDialogs"?: (event: CustomEvent<void>) => void;
        /**
          * click to click To Show MenuBar
         */
        "onClickToShowMenuBar"?: (event: CustomEvent<void>) => void;
        /**
          * clock on searchDialogs
         */
        "onSearchDialogs"?: (event: CustomEvent<ChatDialogInterface>) => void;
    }
    interface MobilePersonal {
        /**
          * array data personal messages
         */
        "message"?: ChatMessage[];
        /**
          * cancel
         */
        "onCancelSearchPersonal"?: (event: CustomEvent<string>) => void;
        /**
          * click to show Dialogs
         */
        "onClickToShowDialogs"?: (event: CustomEvent<string>) => void;
        /**
          * click to user profile
         */
        "onClickToUserProfile"?: (event: CustomEvent<string>) => void;
        /**
          * search for private messages
         */
        "onSearchPersonalMessages"?: (event: CustomEvent<string>) => void;
    }
    interface ModuleChat {
    }
    interface ModuleHeader {
        /**
          * отключение возможности октрытие приложение чата
         */
        "disableShowFullChatState"?: boolean;
        /**
          * close modal
         */
        "onClose"?: (event: CustomEvent<void>) => void;
        /**
          * Разворачивать полную версию чата при клике иконку
         */
        "onShowFullChat"?: (event: CustomEvent<void>) => void;
    }
    interface ModulePersonal {
        /**
          * Возможность записи аудио
         */
        "canRecordAudio"?: boolean;
        "chatActionState"?: ChatUserActionStatusState;
        "chatPresenceState"?: ChatUserPresenceState;
        /**
          * array data dialogs
         */
        "dialogs"?: ChatDialogInterface[];
        /**
          * array data personal messages
         */
        "message"?: ChatMessage[];
        "onCancelSearchPersonal"?: (event: CustomEvent<void>) => void;
        /**
          * show dialogs
         */
        "onClickToShowDialogs"?: (event: CustomEvent<void>) => void;
        /**
          * on click to profile user
         */
        "onClickToUserProfile"?: (event: CustomEvent<void>) => void;
        /**
          * search for private messages
         */
        "onSearchPersonalMessages"?: (event: CustomEvent<string>) => void;
        "onSendTextMessage"?: (event: CustomEvent<string>) => void;
        "openedDialog"?: ChatDialogInterface;
        "writing"?: ChatWritingUserInterface[];
    }
    interface MyComponent {
    }
    interface PersonalFooter {
        /**
          * Возможность записи аудио
         */
        "canRecordAudio"?: boolean;
        /**
          * click on navigate
         */
        "onClickToLink"?: (event: CustomEvent<any>) => void;
        "theme"?: "comp" | "mobile" | "module";
    }
    interface PersonalHeader {
        "chatActionState"?: ChatUserActionStatusState;
        "chatPresenceState"?: ChatUserPresenceState;
        /**
          * array data dialogs
         */
        "dialogs"?: ChatDialogInterface[];
        /**
          * array data personal messages
         */
        "message"?: ChatMessage[];
        /**
          * отмена поиска
         */
        "onCancelSearchPersonal"?: (event: CustomEvent<void>) => void;
        /**
          * Клик по диалогу
         */
        "onClickToDialog"?: (event: CustomEvent<ChatClickToLinkEmit>) => void;
        /**
          * clock on navigate
         */
        "onClickToLink"?: (event: CustomEvent<void>) => void;
        /**
          * click to show user profile
         */
        "onClickToShowDialogs"?: (event: CustomEvent<string>) => void;
        "onClickToUserProfile"?: (event: CustomEvent<void>) => void;
        "onSearchContact"?: (event: CustomEvent<any>) => void;
        /**
          * search for private messages
         */
        "onSearchPersonalMessages"?: (event: CustomEvent<string>) => void;
        "openedDialog"?: ChatDialogInterface;
    }
    interface PersonalMessage {
        /**
          * array data personal messages
         */
        "message"?: ChatMessage[];
        "theme"?: "mobile" | "module" | "comp";
        "writing"?: ChatWritingUserInterface[];
    }
    interface SAdamChat {
        /**
          * отключение поиска контактов
         */
        "disableInnerSearchContactState"?: boolean;
    }
    interface SAdamContacts {
        "contacts"?: ChatContactInterface[];
        /**
          * отключение поиска контактов
         */
        "disableInnerSearchContactState"?: boolean;
        /**
          * Тема для модульного/мобильного чата
         */
        "theme"?: "mobile" | "module" | "comp";
    }
    interface SAdamCopying {
    }
    interface SAdamDialogs {
        /**
          * массив категорий диалогов
         */
        "categories"?: ChatCategoryInterface[];
        /**
          * Массив с элементами диалога
         */
        "dialogs"?: ChatDialogInterface[];
        /**
          * clock on Category
         */
        "onClickToCategory"?: (event: CustomEvent<ChatCategoryInterface>) => void;
        /**
          * Cобытие клика по диалогу
         */
        "onClickToDialog"?: (event: CustomEvent<void>) => void;
        /**
          * Поиск по контактам
         */
        "onSearchDialogs"?: (event: CustomEvent<string>) => void;
    }
    interface SAdamDirect {
        "chatActionState"?: ChatUserActionStatusState;
        "chatPresenceState"?: ChatUserPresenceState;
        /**
          * Личный диалог
         */
        "message"?: ChatMessage[];
        /**
          * Клик по иконке поиска
         */
        "onSearchPersonalMessage"?: (event: CustomEvent<string>) => void;
        /**
          * клик по имени юзера в личной переписке
         */
        "onVisibleUserProfile"?: (event: CustomEvent<void>) => void;
    }
    interface SAdamNavItem {
        /**
          * клик по имени юзера в личной переписке
         */
        "onVisibleContacts"?: (event: CustomEvent<void>) => void;
    }
    interface SAdamNavigate {
        /**
          * Логотип
         */
        "logo"?: ChatLogo;
        /**
          * клик по имени юзера в личной переписке
         */
        "onVisibleContacts"?: (event: CustomEvent<void>) => void;
    }
    interface SAdamNoChat {
    }
    interface SAdamPersonalHeader {
        "chatActionState"?: ChatUserActionStatusState;
        "chatPresenceState"?: ChatUserPresenceState;
        /**
          * Личный диалог
         */
        "message"?: ChatMessage[];
        /**
          * Сброс фильтра сообщений
         */
        "onResetMessagesFilter"?: (event: CustomEvent<void>) => void;
        /**
          * Клик по иконке поиска
         */
        "onSearchPersonalMessage"?: (event: CustomEvent<string>) => void;
        /**
          * клик по имени юзера в личной переписке
         */
        "onVisibleUserProfile"?: (event: CustomEvent<void>) => void;
    }
    interface SAdamProfile {
        /**
          * Массив категорий
         */
        "categories"?: ChatCategoryInterface[];
        /**
          * Показываем список диалогов
         */
        "onClickToShowDialogs"?: (event: CustomEvent<void>) => void;
        /**
          * Показываем папки
         */
        "onClickToShowFolders"?: (event: CustomEvent<void>) => void;
        /**
          * Задаем стиль для мобильной/пк версии
         */
        "theme"?: "comp" | "mobile" | "module";
    }
    interface SAdamSearchContact {
        /**
          * Поиск по контактам
         */
        "onSearchDialogs"?: (event: CustomEvent<string>) => void;
    }
    interface SSaqhanChatAddQuestion {
        "onSendNewMessModal"?: (event: CustomEvent<void>) => void;
    }
    interface SSaqhanChatFiles {
    }
    interface SSaqhanChatFilesWrapper {
        /**
          * click to link
         */
        "onClickToShowDialogs"?: (event: CustomEvent<void>) => void;
    }
    interface SSaqhanChatFormSearch {
        /**
          * array categories
         */
        "categories"?: ChatCategoryInterface[];
        /**
          * Клик по кнопке files
         */
        "onClickToFilesBtn"?: (event: CustomEvent<void>) => void;
        /**
          * Клик по кнопке в чате
         */
        "onSearchDialog"?: (event: CustomEvent<string>) => void;
    }
    interface SSaqhanChatFormSearchFiles {
        "onClickToShowDialogs"?: (event: CustomEvent<void>) => void;
    }
    interface SSaqhanChatUser {
        /**
          * массив с диалогами
         */
        "dialogs"?: ChatDialogInterface[];
    }
    interface SSaqhanChatUsers {
        /**
          * Массив данных с диалогами
         */
        "dialogs"?: ChatDialogInterface[];
    }
    interface SSaqhanChatUsersWrapper {
        "categories"?: ChatCategoryInterface[];
        /**
          * Массив данных с диалогами
         */
        "dialogs"?: ChatDialogInterface[];
        "onClickToCategory"?: (event: CustomEvent<ChatCategoryInterface>) => void;
        /**
          * click to dialog
         */
        "onClickToDialog"?: (event: CustomEvent<ChatDialogInterface>) => void;
        /**
          * click to files button
         */
        "onClickToFilesBtn"?: (event: CustomEvent<void>) => void;
        "onSearchDialog"?: (event: CustomEvent<string>) => void;
        /**
          * send new mess
         */
        "onSendNewMessModal"?: (event: CustomEvent<string>) => void;
        /**
          * Массив данных с личным чатом
         */
        "personalMessage"?: ChatMessage[];
    }
    interface UserFolders {
        /**
          * Массив dialogs
         */
        "dialogs"?: ChatDialogInterface[];
        /**
          * переход на профиль пользователя
         */
        "onClickToUserProfile"?: (event: CustomEvent<void>) => void;
        /**
          * создание папки
         */
        "onCreateFolder"?: (event: CustomEvent<ChatCreateFolderOutputInterface>) => void;
        /**
          * Задаем стиль для мобильной/пк версии
         */
        "theme"?: "comp" | "mobile" | "module";
    }
    interface UserProfile {
        "onClickToShowDialogs"?: (event: CustomEvent<any>) => void;
    }
    interface UserStatus {
        "chatActionState"?: ChatUserActionStatusState;
        "chatPresenceState"?: ChatUserPresenceState;
        /**
          * Тема для блока
         */
        "theme"?: "comp" | "mobile" | "module";
    }
    interface IntrinsicElements {
        "btn-wrapper": BtnWrapper;
        "cnt-module-chat": CntModuleChat;
        "contact-card": ContactCard;
        "contacts-list": ContactsList;
        "contacts-list-body": ContactsListBody;
        "contacts-list-header": ContactsListHeader;
        "dialog-card": DialogCard;
        "dialog-categories": DialogCategories;
        "footer-audio": FooterAudio;
        "footer-text": FooterText;
        "m-chat-dialogs": MChatDialogs;
        "m-chat-footer": MChatFooter;
        "m-chat-header": MChatHeader;
        "message-from": MessageFrom;
        "message-img": MessageImg;
        "message-text": MessageText;
        "mobile-chat": MobileChat;
        "mobile-dialogs": MobileDialogs;
        "mobile-personal": MobilePersonal;
        "module-chat": ModuleChat;
        "module-header": ModuleHeader;
        "module-personal": ModulePersonal;
        "my-component": MyComponent;
        "personal-footer": PersonalFooter;
        "personal-header": PersonalHeader;
        "personal-message": PersonalMessage;
        "s-adam-chat": SAdamChat;
        "s-adam-contacts": SAdamContacts;
        "s-adam-copying": SAdamCopying;
        "s-adam-dialogs": SAdamDialogs;
        "s-adam-direct": SAdamDirect;
        "s-adam-nav-item": SAdamNavItem;
        "s-adam-navigate": SAdamNavigate;
        "s-adam-no-chat": SAdamNoChat;
        "s-adam-personal-header": SAdamPersonalHeader;
        "s-adam-profile": SAdamProfile;
        "s-adam-search-contact": SAdamSearchContact;
        "s-saqhan-chat-add-question": SSaqhanChatAddQuestion;
        "s-saqhan-chat-files": SSaqhanChatFiles;
        "s-saqhan-chat-files-wrapper": SSaqhanChatFilesWrapper;
        "s-saqhan-chat-form-search": SSaqhanChatFormSearch;
        "s-saqhan-chat-form-search-files": SSaqhanChatFormSearchFiles;
        "s-saqhan-chat-user": SSaqhanChatUser;
        "s-saqhan-chat-users": SSaqhanChatUsers;
        "s-saqhan-chat-users-wrapper": SSaqhanChatUsersWrapper;
        "user-folders": UserFolders;
        "user-profile": UserProfile;
        "user-status": UserStatus;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "btn-wrapper": LocalJSX.BtnWrapper & JSXBase.HTMLAttributes<HTMLBtnWrapperElement>;
            "cnt-module-chat": LocalJSX.CntModuleChat & JSXBase.HTMLAttributes<HTMLCntModuleChatElement>;
            "contact-card": LocalJSX.ContactCard & JSXBase.HTMLAttributes<HTMLContactCardElement>;
            "contacts-list": LocalJSX.ContactsList & JSXBase.HTMLAttributes<HTMLContactsListElement>;
            "contacts-list-body": LocalJSX.ContactsListBody & JSXBase.HTMLAttributes<HTMLContactsListBodyElement>;
            "contacts-list-header": LocalJSX.ContactsListHeader & JSXBase.HTMLAttributes<HTMLContactsListHeaderElement>;
            "dialog-card": LocalJSX.DialogCard & JSXBase.HTMLAttributes<HTMLDialogCardElement>;
            "dialog-categories": LocalJSX.DialogCategories & JSXBase.HTMLAttributes<HTMLDialogCategoriesElement>;
            "footer-audio": LocalJSX.FooterAudio & JSXBase.HTMLAttributes<HTMLFooterAudioElement>;
            "footer-text": LocalJSX.FooterText & JSXBase.HTMLAttributes<HTMLFooterTextElement>;
            "m-chat-dialogs": LocalJSX.MChatDialogs & JSXBase.HTMLAttributes<HTMLMChatDialogsElement>;
            "m-chat-footer": LocalJSX.MChatFooter & JSXBase.HTMLAttributes<HTMLMChatFooterElement>;
            "m-chat-header": LocalJSX.MChatHeader & JSXBase.HTMLAttributes<HTMLMChatHeaderElement>;
            "message-from": LocalJSX.MessageFrom & JSXBase.HTMLAttributes<HTMLMessageFromElement>;
            "message-img": LocalJSX.MessageImg & JSXBase.HTMLAttributes<HTMLMessageImgElement>;
            "message-text": LocalJSX.MessageText & JSXBase.HTMLAttributes<HTMLMessageTextElement>;
            "mobile-chat": LocalJSX.MobileChat & JSXBase.HTMLAttributes<HTMLMobileChatElement>;
            "mobile-dialogs": LocalJSX.MobileDialogs & JSXBase.HTMLAttributes<HTMLMobileDialogsElement>;
            "mobile-personal": LocalJSX.MobilePersonal & JSXBase.HTMLAttributes<HTMLMobilePersonalElement>;
            "module-chat": LocalJSX.ModuleChat & JSXBase.HTMLAttributes<HTMLModuleChatElement>;
            "module-header": LocalJSX.ModuleHeader & JSXBase.HTMLAttributes<HTMLModuleHeaderElement>;
            "module-personal": LocalJSX.ModulePersonal & JSXBase.HTMLAttributes<HTMLModulePersonalElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "personal-footer": LocalJSX.PersonalFooter & JSXBase.HTMLAttributes<HTMLPersonalFooterElement>;
            "personal-header": LocalJSX.PersonalHeader & JSXBase.HTMLAttributes<HTMLPersonalHeaderElement>;
            "personal-message": LocalJSX.PersonalMessage & JSXBase.HTMLAttributes<HTMLPersonalMessageElement>;
            "s-adam-chat": LocalJSX.SAdamChat & JSXBase.HTMLAttributes<HTMLSAdamChatElement>;
            "s-adam-contacts": LocalJSX.SAdamContacts & JSXBase.HTMLAttributes<HTMLSAdamContactsElement>;
            "s-adam-copying": LocalJSX.SAdamCopying & JSXBase.HTMLAttributes<HTMLSAdamCopyingElement>;
            "s-adam-dialogs": LocalJSX.SAdamDialogs & JSXBase.HTMLAttributes<HTMLSAdamDialogsElement>;
            "s-adam-direct": LocalJSX.SAdamDirect & JSXBase.HTMLAttributes<HTMLSAdamDirectElement>;
            "s-adam-nav-item": LocalJSX.SAdamNavItem & JSXBase.HTMLAttributes<HTMLSAdamNavItemElement>;
            "s-adam-navigate": LocalJSX.SAdamNavigate & JSXBase.HTMLAttributes<HTMLSAdamNavigateElement>;
            "s-adam-no-chat": LocalJSX.SAdamNoChat & JSXBase.HTMLAttributes<HTMLSAdamNoChatElement>;
            "s-adam-personal-header": LocalJSX.SAdamPersonalHeader & JSXBase.HTMLAttributes<HTMLSAdamPersonalHeaderElement>;
            "s-adam-profile": LocalJSX.SAdamProfile & JSXBase.HTMLAttributes<HTMLSAdamProfileElement>;
            "s-adam-search-contact": LocalJSX.SAdamSearchContact & JSXBase.HTMLAttributes<HTMLSAdamSearchContactElement>;
            "s-saqhan-chat-add-question": LocalJSX.SSaqhanChatAddQuestion & JSXBase.HTMLAttributes<HTMLSSaqhanChatAddQuestionElement>;
            "s-saqhan-chat-files": LocalJSX.SSaqhanChatFiles & JSXBase.HTMLAttributes<HTMLSSaqhanChatFilesElement>;
            "s-saqhan-chat-files-wrapper": LocalJSX.SSaqhanChatFilesWrapper & JSXBase.HTMLAttributes<HTMLSSaqhanChatFilesWrapperElement>;
            "s-saqhan-chat-form-search": LocalJSX.SSaqhanChatFormSearch & JSXBase.HTMLAttributes<HTMLSSaqhanChatFormSearchElement>;
            "s-saqhan-chat-form-search-files": LocalJSX.SSaqhanChatFormSearchFiles & JSXBase.HTMLAttributes<HTMLSSaqhanChatFormSearchFilesElement>;
            "s-saqhan-chat-user": LocalJSX.SSaqhanChatUser & JSXBase.HTMLAttributes<HTMLSSaqhanChatUserElement>;
            "s-saqhan-chat-users": LocalJSX.SSaqhanChatUsers & JSXBase.HTMLAttributes<HTMLSSaqhanChatUsersElement>;
            "s-saqhan-chat-users-wrapper": LocalJSX.SSaqhanChatUsersWrapper & JSXBase.HTMLAttributes<HTMLSSaqhanChatUsersWrapperElement>;
            "user-folders": LocalJSX.UserFolders & JSXBase.HTMLAttributes<HTMLUserFoldersElement>;
            "user-profile": LocalJSX.UserProfile & JSXBase.HTMLAttributes<HTMLUserProfileElement>;
            "user-status": LocalJSX.UserStatus & JSXBase.HTMLAttributes<HTMLUserStatusElement>;
        }
    }
}
